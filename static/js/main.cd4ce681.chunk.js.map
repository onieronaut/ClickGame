{"version":3,"sources":["components/Navbar/Navbar.js","components/Container/index.js","components/Portrait/Portrait.js","components/Row/Row.js","components/Col/Col.js","components/Alert/Alert.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","score","topScore","Container","fluid","Portrait","id","alt","name","src","image","Row","Col","size","split","map","join","Alert","start","type","children","Footer","App","state","portraits","correct","guessed","guessAlert","startGame","checkGuess","guess","wrong","forEach","guesses","wrongGuess","correctGuess","setState","shufflePortraits","concat","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","this","portrait","key","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cd4ce681.chunk.js","sourcesContent":["import React from \"react\"\r\nimport \"./style.css\"\r\n\r\nconst Navbar = props => {\r\n    return (\r\n        <nav className=\"navbar bg-danger navbar-expand-lg sticky-top\">\r\n            <h1>Clicky Game</h1>\r\n\r\n            <ul className=\"ml-auto\">\r\n                <h4>\r\n\r\n            Score: {props.score} | \r\n            \r\n            Top Score: {props.topScore}\r\n                </h4>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\n\nconst Container = props => {\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\n}\n\nexport default Container;\n","import React from \"react\";\r\nimport \"./style.css\"\r\n\r\nconst Portrait = props => {\r\n    return (\r\n        <div className=\"card\" id={props.id} {...props}>\r\n            <div className=\"img-container text-center\">\r\n                <img alt={props.name} src={props.image}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Portrait;","import React from \"react\";\r\n\r\nconst Row = props => {\r\n  return (\r\n  <div className={`row${props.fluid ? \"-fluid\" : \"\"}`} {...props} />\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","import React from \"react\";\r\n\r\nconst Col = props => {\r\n  const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\r\n\r\n  return <div className={size} {...props} />;\r\n}\r\n\r\nexport default Col;\r\n","import React from \"react\";\r\n\r\nconst Alert = props => {\r\n\r\n    if (props.start) {\r\n        return (\r\n            <div className={`alert alert-primary text-center`}>\r\n                <h5>Try to click each fruit only once!</h5>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className={`alert alert-${props.type} text-center`}>\r\n                <h5>{props.children}</h5>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Alert;","import React from 'react';\r\nimport \"./style.css\"\r\n\r\nconst Footer = props => {\r\n    return (\r\n        <div className=\"footer bg-danger text-center\">\r\n            <div className=\"container\">\r\n            Made with React.js\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport Navbar from './components/Navbar/Navbar';\nimport Container from './components/Container';\nimport Portrait from './components/Portrait/Portrait';\nimport Row from './components/Row/Row';\nimport portraits from \"./portraits.json\";\nimport Col from \"./components/Col/Col\"\nimport Alert from './components/Alert/Alert'\nimport Footer from './components/Footer/Footer';\n\nclass App extends Component {\n\n  state = {\n    portraits,\n    correct: 0,\n    topScore: 0,\n    guessed: [],\n    guessAlert: null,\n    startGame: true\n  };\n\n\n  checkGuess = guess => {\n\n    let wrong = false;\n\n    this.state.guessed.forEach(guesses => {\n      if (guesses === guess)\n        wrong = true;\n    });\n\n    if (wrong) {\n      this.wrongGuess();\n    } else {\n      this.correctGuess(guess);\n    };\n\n  };\n\n  wrongGuess = () => {\n\n    this.setState({\n      correct: 0,\n      guessed: [],\n      guessAlert: false,\n      startGame: false\n    });\n\n    this.shufflePortraits(portraits);\n\n  };\n\n  correctGuess = guess => {\n    this.setState(\n      {\n        correct: this.state.correct + 1,\n        guessed: this.state.guessed.concat(guess),\n        guessAlert: true,\n        startGame: false\n      }\n    );\n\n    this.shufflePortraits(portraits);\n\n    if (this.state.correct >= this.state.topScore) {\n      this.setState({ topScore: this.state.topScore + 1 })\n    }\n  }\n\n  shufflePortraits = array => {\n\n    let currentIndex = array.length, temporaryValue, randomIndex;\n\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  render() {\n\n    return (\n      <div>\n\n        <Navbar score={this.state.correct} topScore={this.state.topScore} />\n        {this.state.correct === 12 &&\n        <Alert type=\"success\"> You win! </Alert>   }     \n        <Alert\n          start={this.state.startGame}\n        type={this.state.guessAlert ? \"success\" : \"danger\"}>\n          {this.state.guessAlert ? \"You guessed right\" : \"You guessed wrong\"}\n        </Alert>\n      <Container>\n        <Row>\n          {\n            this.state.portraits.map(portrait => (\n              <Col size=\"sm-3\" key={portrait.id}>\n                <Portrait\n                  id={portrait.id}\n                  name={portrait.name}\n                  image={portrait.image}\n                  onClick={() => this.checkGuess(portrait.id)} />\n              </Col>\n            ))\n          }\n        </Row>\n      </Container>\n      <Footer />\n\n      </div >\n    );\n  }\n\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}